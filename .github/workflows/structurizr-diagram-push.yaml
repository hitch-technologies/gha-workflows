name: "Structurizr Diagram Deployment"

on:
  workflow_call:
  
    inputs:
      PROJECT:
        type: string
        required: true
      TEAM:
        type: string
        required: true
      ARCHITECTURE_REPO:
        type: string
        required: true
      SLACK_DEPLOY_CHANNEL_ID:
        type: string
        required: true
      STRUCTURIZR_URL:
        type: string
        required: true
      WORKSPACE_DIAGRAM_PATH:
        type: string
        required: true
    secrets:
      slack-bot-token:
        required: true
      gh-pat:
        required: true
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true
      structurizr-admin-api-key:
        required: true
        
jobs:
  workflow:
    runs-on: eks-small-runner
    outputs:
      TAG: ${{ env.TAG }}
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}

    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      # - name: Notify Slack of Deployment
      #   id: gh-deploy-prod
      #   uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
      #   with:
      #     channel_id: ${{ inputs.SLACK_DEPLOY_CHANNEL_ID }}
      #     status: |
      #       Deploying Diagram on Structurizr

      #       - Version Tag: ${{ env.TAG }}
      #       - Actor: ${{ env.GITHUB_ACTOR }}
      #       - Job URL: ${{ env.JOB_URL }}
      #       - Workspace: ${{ inputs.TEAM }}/${{ inputs.PROJECT }}
      #     color: 0037FF
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: hitch-technologies/${{ inputs.ARCHITECTURE_REPO }}
          token: ${{ secrets.gh-pat }}
          ref: main

      - name: Check and create workspace
        run: |
          # Get the list of all workspaces and check if a workspace exists
          get_workspaces() {
            curl -s -X GET "${{ inputs.STRUCTURIZR_URL }}/api/workspace" -H "X-Authorization: ${{ secrets.structurizr-admin-api-key }}"
          }

          check_workspace_exists() {
            local workspaces
            workspaces=$(get_workspaces)
            local workspace_id
            workspace_id=$(echo "$workspaces" | jq -r --arg WORKSPACE_NAME "$WORKSPACE_NAME" '.workspaces[] | select(.name == $WORKSPACE_NAME) | .id')

            if [ -n "$workspace_id" ]; then
              echo "Workspace with name $WORKSPACE_NAME already exists."
              return 0
            else
              echo "Workspace with name $WORKSPACE_NAME does not exist."
              return 1
            fi
          }

          # Function to create a new workspace
          create_workspace() {
            local response
            response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ inputs.STRUCTURIZR_URL }}/workspace" -H "X-Authorization: ${{ secrets.structurizr-admin-api-key }}")
            
            if [ "$response" == "200" ]; then
              echo "Workspace created successfully."
              return 0
            else
              echo "Failed to create workspace."
              return 1
            fi
          }

          # Check if the workspace exists
          if ! check_workspace_exists; then
            # Create the workspace if it doesn't exist
            create_workspace
          fi

          # Fetch the workspace ID, API Key, and API Secret
          get_workspace_details() {
            local workspaces
            workspaces=$(get_workspaces)
            
            WORKSPACE_ID=$(echo "$workspaces" | jq -r --arg WORKSPACE_NAME "$WORKSPACE_NAME" '.workspaces[] | select(.name == $WORKSPACE_NAME) | .id')
            API_KEY=$(echo "$workspaces" | jq -r --arg WORKSPACE_NAME "$WORKSPACE_NAME" '.workspaces[] | select(.name == $WORKSPACE_NAME) | .apiKey')
            API_SECRET=$(echo "$workspaces" | jq -r --arg WORKSPACE_NAME "$WORKSPACE_NAME" '.workspaces[] | select(.name == $WORKSPACE_NAME) | .apiSecret')

            export WORKSPACE_ID
            export WORKSPCE_API_KEY
            export WORKSPACE_SECRET

            echo "Workspace ID: $WORKSPACE_ID"
            echo "API Key: $WORKSPCE_API_KEY"
            echo "API Secret: $WORKSPACE_SECRET"
          }

          get_workspace_details

      - name: Run structurizr-cli push
        uses: aidmax/structurizr-cli-action@v1
        with:
          id: $WORKSPACE_ID
          key: $WORKSPCE_API_KEY
          secret: $WORKSPACE_SECRET
          workspace: ${{ inputs.WORKSPACE_DIAGRAM_PATH }}
          url: ${{ inputs.STRUCTURIZR_URL }}
          merge: false
          archive: true

      - name: Notify Slack of Success
        if: success()
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_DEPLOY_CHANNEL_ID }}
          message_id: ${{ steps.gh-deploy-prod.outputs.message_id }}
          status: |
            Structurizr diagram deployed

            - Version Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
            - Workspace: ${{ inputs.TEAM }}/${{ inputs.PROJECT }}
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Notify Slack of Failure
        if: failure()
        uses: FlexCharge/github-action-slack-notify-build@f953c3ec8cd2f6f726a9a87bf87ac30cab0a1e19
        with:
          channel_id: ${{ inputs.SLACK_DEPLOY_CHANNEL_ID }}
          message_id: ${{ steps.gh-deploy-prod.outputs.message_id }}
          status: |
            Structurizr diagram deployment failed

            - Version Tag: ${{ env.TAG }}
            - Actor: ${{ env.GITHUB_ACTOR }}
            - Job URL: ${{ env.JOB_URL }}
            - Workspace: ${{ inputs.TEAM }}/${{ inputs.PROJECT }}
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

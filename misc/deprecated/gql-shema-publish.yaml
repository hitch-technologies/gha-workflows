name: "GQL Schema Publish"

on:
  workflow_call:
  
    inputs:
      ENV_DOMAIN:
        
      SERVICE:
        type: string
        required: true
      SLACK_DEPLOY_CHANNEL_ID:
        type: string
        required: true
      ECR_REPO:
        type: string
        required: true
        description: 'Name of the ECR Repo'
      ECR_FULL_PATH:
        type: string
        required: true
        description: 'Elastic Container Repository of the service'
      KUSTOMIZE:
        type: string
        required: true
        description: 'Path to service code'
      DEPLOYMENT_REPO:
        type: string
        required: true
        description: 'Deployment Repository'
      ARGO_ROLLOUTS_URL:
        type: string
        required: true
        description: 'Deployment Repository'
        
    secrets:
      slack-bot-token:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      gh-pat:
        required: true
      dockerhub-username:
        required: true
      dockerhub-token:
        required: true
        
jobs:
  workflow:
    runs-on: small-runner
    outputs:
      TAG: ${{ env.TAG }}
      GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}

    steps:
      - name: Set environment variables
        run: |
          echo "SHORT_COMMIT=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF##*/}-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Notify Slack of Shema publish
        id: gh-build
        uses: voxmedia/github-action-slack-notify-build@v1.6.0
        with:
          channel_id: ${{ inputs.SLACK_BUILD_CHANNEL_ID }}
          message_id: ${{ inputs.SLACK_BUILD_MESSAGE_ID }}
          status: |
            Starting GQL Schema publish

            # - Image Tag: ${{ env.TAG }}
            # - Actor: ${{ env.GITHUB_ACTOR }}
            # - Job URL: ${{ env.JOB_URL }}
          color: 0037FF
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}

      - name: Extract scheme.graphql
        uses: shrink/actions-docker-extract@v1
        id: extract
        with:
          image: '{{ inputs.ECR_FULL_PATH }}:${{ env.TAG }}'
          path: './src/gql/scheme.graphql'

      - name: Upload GQL Scheme
        uses: actions/upload-artifact@v3
        with:
          path: ${{ steps.extract.outputs.destination }}
          name: ${{ inputs.ECR_REPO }}-gql-scheme
          if-no-files-found: warn

      # - name: Download GQL Scheme
      #   uses: actions/download-artifact@v3
      #   with:
      #     path: .
      #     name: ${{ inputs.ECR_REPO }}-gql-scheme
      #     if-no-files-found: warn

      - name: Install Rover
        run: |
          curl -sSL https://rover.apollo.dev/nix/v0.1.0 | sh
          # Add Rover to the $GITHUB_PATH so it can be used in another step
          echo "$HOME/.rover/bin" >> $GITHUB_PATH

      - name: Publish Service Subgraph
        env:
          APOLLO_KEY: ${{ secrets.GATEWAY_SERVICE_APOLLO_KEY }}
          APOLLO_VCS_COMMIT: ${{ github.event.pull_request.head.sha }}
        run: |
          rover subgraph publish Supergraph-nsal4s@Development \
          --schema "${{ steps.extract.outputs.destination }}" \
          --name ${{ inputs.ECR_REPO }} \
          --routing-url "https://${{ inputs.SERVICE }}/graphql"